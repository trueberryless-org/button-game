@page "/game/{GameGuidString}/{PlayerGuidString}"
@using MultiplayerGame.Web.Components.Services
@using MultiplayerGame.Web.Model
@using MultiplayerGame.Web.Repositories
@inject Matchmaking Matchmaking
@inject IMongoRepository<Player> MongoRepository
@implements IDisposable
@rendermode InteractiveServer

<div class="p-4">
    @if (_game != null)
    {
        @if (_game.PlayerOne == _playerGuid)
        {
            <PageTitle>Player 1</PageTitle>
        }
        else
        {
            <PageTitle>Player 2</PageTitle>
        }

        @if (_game.PlayersReady())
        {
            @if (_game.Status.PlayerOneWon == null)
            {
                <div style="position: relative; margin-top: 8rem">
                    <div style="display: flex; justify-content: space-between; position: absolute; inset: 0; user-select: none">
                        <div style="width: 2rem; height: 40rem; border-radius: 1000000px; background-color: #fb8500; user-select: none"></div>
                        <div style="width: 2rem; height: 40rem; border-radius: 1000000px; background-color: #023047; user-select: none"></div>
                    </div>
                    <div style="display: flex; justify-content: space-between; position: relative">
                        <button @onclick="async () => await ClickCircleOne()" style="width: @(_game.Status.PlayerOneCircleSize)rem; height: 40rem; border-radius: 1000000px; background-color: #ffb703; display: flex; justify-content: center; align-items: center; font-family: 'Bauhaus 93', sans-serif; font-size: 4rem; color: black;">
                            @if (_game.PlayerOne == _playerGuid && _game.Status.PlayerOneCircleSize > 20)
                            {
                                <p>Click</p>
                            }
                        </button>
                        <button @onclick="async () => await ClickCircleTwo()" style="width: @(_game.Status.PlayerTwoCircleSize)rem; height: 40rem; border-radius: 1000000px; background-color: #219ebc; display: flex; justify-content: center; align-items: center; font-family: 'Bauhaus 93', sans-serif; font-size: 4rem; color: white;">
                            @if (_game.PlayerTwo == _playerGuid && _game.Status.PlayerTwoCircleSize > 20)
                            {
                                <p>Click</p>
                            }
                        </button>
                    </div>
                </div>
            }
            else
            {
                switch (_game.Status.PlayerOneWon)
                {
                    case true:
                        <p>Player One Won!</p>
                        break;
                    case false:
                        <p>Player Two Won!</p>
                        break;
                }

                <button @onclick="Revanche">Revanche</button>
            }

            @if (_game.Status.Created.AddSeconds(3) > DateTime.Now)
            {
                <div style="position: absolute; inset: 0; backdrop-filter: brightness(20%) blur(6px); z-index: 100000; display: flex; justify-content: center; align-items: center; font-family: 'Bauhaus 93', sans-serif; font-size: 20rem; color: white; user-select: none">
                    @(((_game.Status.Created.AddSeconds(3) - DateTime.Now).TotalSeconds).ToString("N2"))
                </div>
            }
        }
        else
        {
            <p>Waiting for the other player...</p>
        }
    }
    else
    {
        <p>This game has unfortunately been deleted...</p>
    }
</div>


@code {
    [Parameter] public string GameGuidString { get; set; }
    [Parameter] public string PlayerGuidString { get; set; }

    private Guid _playerGuid;
    private GameController? _game;
    private Timer? botCircleOne;
    private Timer? botCircleTwo;

    protected override async Task OnParametersSetAsync()
    {
        _game = Matchmaking.Game(Guid.Parse(GameGuidString));
        _playerGuid = Guid.Parse(PlayerGuidString);

        if (_game == null) return;

        _game.Status.Created = DateTime.Now;
        _game.UpdateClients += HandleUpdateClients;
    }

    private async void HandleUpdateClients(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());

        if (_game == null) return;
        var scores = await MongoRepository.ReadAllAsync();
        if (scores.Find(p => p.Name == "Bot") == null)
            await MongoRepository.CreateAsync(new Player() { Name = "Bot", Points = 0 });
        var botId = (await MongoRepository.ReadAsync(p => p.Name == "Bot"))[0].Id;
        var player = await MongoRepository.ReadAsync(_playerGuid);
        if (_game.PlayerTwo != botId || botCircleOne != null || botCircleTwo != null || player == null) return;
        _game.Status.Created = DateTime.Now;
        botCircleOne = new Timer(BotCircleOne, null, 3500, (int)Math.Clamp(Math.Round(2000 / Math.Pow(player.Points, 0.02)), 1000, 2000));
        botCircleTwo = new Timer(BotCircleTwo, null, 3500, (int)Math.Clamp(Math.Round(1000 / Math.Pow(player.Points, 0.02)), 200, 1000));
    }

    private async Task ClickCircleOne()
    {
        if (_game == null) return;

        if (_game.PlayerOne == _playerGuid)
        {
            _game.Status.PlayerOneCircleSize = Math.Max((int)Math.Floor(_game.Status.PlayerOneCircleSize / 1.1), 2);
            if (_game.Status is { PlayerOneCircleSize: <= 2, PlayerOneWon: null })
            {
                _game.Status.PlayerOneWon = true;

                var player = await MongoRepository.ReadAsync(_game.PlayerOne);
                if (player == null) return;
                player.Points += (int)Math.Min(Math.Round(1000000 / _game.Status.PlayerTwoCircleSize / (player.Points == 0 ? 100 : player.Points)), 999);
                await MongoRepository.UpdateAsync(player.Id, player);

                var playerOther = await MongoRepository.ReadAsync(_game.PlayerTwo);
                if (playerOther == null) return;
                playerOther.Points -= (int)Math.Min(Math.Round(_game.Status.PlayerTwoCircleSize * Math.Pow(player.Points == 0 ? 100 : player.Points, 0.25)), 1234);
                if (playerOther.Points < 0) playerOther.Points = 0;
                await MongoRepository.UpdateAsync(playerOther.Id, playerOther);
            }
        }
        else
        {
            _game.Status.PlayerOneCircleSize = Math.Min((int)Math.Ceiling(_game.Status.PlayerOneCircleSize * 1.15), 40);
        }
    }

    private async Task ClickCircleTwo()
    {
        if (_game == null) return;

        if (_game.PlayerOne == _playerGuid)
        {
            _game.Status.PlayerTwoCircleSize = Math.Min((int)Math.Ceiling(_game.Status.PlayerTwoCircleSize * 1.15), 40);
        }
        else
        {
            _game.Status.PlayerTwoCircleSize = Math.Max((int)Math.Floor(_game.Status.PlayerTwoCircleSize / 1.1), 2);
            if (_game.Status is { PlayerTwoCircleSize: <= 2, PlayerOneWon: null })
            {
                _game.Status.PlayerOneWon = false;

                var player = await MongoRepository.ReadAsync(_game.PlayerTwo);
                if (player == null) return;
                player.Points += (int)Math.Min(Math.Round(1000000 / _game.Status.PlayerOneCircleSize / (player.Points == 0 ? 100 : player.Points)), 999);
                await MongoRepository.UpdateAsync(player.Id, player);

                var playerOther = await MongoRepository.ReadAsync(_game.PlayerOne);
                if (playerOther == null) return;
                playerOther.Points -= (int)Math.Min(Math.Round(_game.Status.PlayerOneCircleSize * Math.Pow(player.Points == 0 ? 100 : player.Points, 0.25)), 1234);
                if (playerOther.Points < 0) playerOther.Points = 0;
                await MongoRepository.UpdateAsync(playerOther.Id, playerOther);
            }
        }
    }

    private void BotCircleOne(object? state)
    {
        if (_game == null) return;
        if (_game.Status.Created.AddSeconds(3) > DateTime.Now) return;

        _game.Status.PlayerOneCircleSize = Math.Min((int)Math.Ceiling(_game.Status.PlayerOneCircleSize * 1.15), 40);
    }

    private async void BotCircleTwo(object? state)
    {
        if (_game == null) return;
        if (_game.Status.Created.AddSeconds(3) > DateTime.Now) return;

        _game.Status.PlayerTwoCircleSize = Math.Max((int)Math.Floor(_game.Status.PlayerTwoCircleSize / 1.1), 2);
        if (_game.Status is { PlayerTwoCircleSize: <= 2, PlayerOneWon: null })
        {
            _game.Status.PlayerOneWon = false;

            var player = await MongoRepository.ReadAsync(_game.PlayerTwo);
            if (player == null) return;
            player.Points += (int)Math.Min(Math.Round(1000000 / _game.Status.PlayerOneCircleSize / (player.Points == 0 ? 100 : player.Points)), 999);
            await MongoRepository.UpdateAsync(player.Id, player);

            var playerOther = await MongoRepository.ReadAsync(_game.PlayerOne);
            if (playerOther == null) return;
            playerOther.Points -= (int)Math.Min(Math.Round(_game.Status.PlayerOneCircleSize * Math.Pow(player.Points == 0 ? 100 : player.Points, 0.25)), 1234);
            if (playerOther.Points < 0) playerOther.Points = 0;
            await MongoRepository.UpdateAsync(playerOther.Id, playerOther);
        }
    }

    private void Revanche()
    {
        if (_game == null) return;
        _game.Status.PlayerOneCircleSize = 40;
        _game.Status.PlayerTwoCircleSize = 40;
        _game.Status.Created = DateTime.Now;
        _game.Status.PlayerOneWon = null;
        botCircleOne?.Dispose();
        botCircleTwo?.Dispose();
        botCircleOne = null;
        botCircleTwo = null;
    }

    public void Dispose()
    {
        botCircleOne?.Dispose();
        botCircleTwo?.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        if (botCircleOne != null) await botCircleOne.DisposeAsync();
        if (botCircleTwo != null) await botCircleTwo.DisposeAsync();
    }

}

<style>
#scores {
  font-family: Arial, Helvetica, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

#scores td, #scores th {
  border: 1px solid #ddd;
  padding: 8px;
}

#scores tr:nth-child(even){background-color: #f2f2f2;}

#scores tr:hover {background-color: #ddd;}

#scores th {
  padding-top: 12px;
  padding-bottom: 12px;
  text-align: left;
  background-color: #04AA6D;
  color: white;
}
</style>